import rollup from 'rollup';

interface ProcessOptions {
    /**
     * The original plugin options supplied to the plugin. Used by default processors
     * for accessing low-level processor options supplied by the user
     */
    readonly pluginOptions: LitStylesOptions;

    /**
     * The Rollup module ID (file path) for the file being processed
     */
    readonly moduleId: string;

    /**
     * The styles to process. Either the initial contents of the file being processed,
     * or the resulting styles from the previous processor.
     */
    readonly styles: string
}

interface ProcessResults {
    /**
     * The styles after being processed by the processor.
     */
    readonly styles: string;

    /**
     * An optional array of file paths to tell Rollup to watch for changes (usually any
     * files imported by the styles while being processed).
     */
    readonly watchFiles?: string[];

    /**
     * An optional array of warnings generated by the processor to be output to the
     * console.
     */
    readonly warnings?: string[];
}

interface StylesProcessorOptions {
    /**
     * The list of extensions which this processor supports. Extensions may or may
     * not start with a '.'. If a '*' is supplied as an extension, then the processor
     * will process any file type
     * @default []
     */
    readonly extensions?: string[];

    /**
     * The async process function. It will be called with a ProcessOptions dictionary
     * and must return a promise resolving with a ProcessResults dictionary
     */
    readonly process?: (options: ProcessOptions) => Promise<ProcessResults>;
}

interface LitStylesOptions {
    /**
     * The list of extensions to attempt to load as styles files. Extensions may or
     * may not start with a '.'
     * @default [ '.css', '.scss', '.sass', '.pcss' ]
     */
    readonly extensions?: string[];

    /**
     * A list of styles preprocessors to process the styles files with. The processors
     * will be run in the order they are provided. To specify a default pre-processor,
     * supply its name ('sass' or 'postcss'). To specify a custom pre-processor, supply
     * a StylesProcessorOptions dictionary
     * @default [ 'sass', 'postcss' ]
     */
    readonly preProcessors?: Array<'sass' | 'postcss' | StylesProcessorOptions>;

    /**
     * Any additional options to pass to the Sass processor (see documentation here:
     * https://www.npmjs.com/package/sass#api). If `data` is supplied, it will be
     * overridden
     */
    readonly sass?: any;

    /**
     * Any additional options to pass to the PostCSS processor (see documentation here:
     * http://api.postcss.org/global.html#processOptions). If `from` is supplied,
     * it will be overridden
     */
    readonly postcss?: any;

    /**
     * An array of PostCSS plugins to pass to the PostCSS processor
     */
    readonly postcssPlugins?: any[];
}

/**
 * Lit styles rollup plugin
 */
export default function litStyles(options?: LitStylesOptions): rollup.Plugin;
